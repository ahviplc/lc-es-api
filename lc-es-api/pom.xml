<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.lc</groupId>
    <artifactId>lc-es-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>lc-es-api</name>
    <description>lc-es-api for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <!--自己定义es版本依赖,保证和本地一致-->
        <elasticsearch.version>7.6.2</elasticsearch.version>
        <!--使用maven打包跳过test-->
        <skipTests>true</skipTests>
    </properties>

    <repositories>
        <!--阿里云公共仓库-public是central仓和jcenter仓的聚合仓-->
        <repository>
            <id>aliyun-maven-repo</id>
            <name>阿里云公共仓库-public</name>
            <url>https://maven.aliyun.com/repository/public</url>
        </repository>
        <!--添加repositories 使用fastgit 速度更快 可解决Could not transfer artifact问题-->
        <repository>
            <id>ahviplc-maven-repo</id>
            <!-- 原始链接 -->
            <!-- <url>https://raw.githubusercontent.com/ahviplc/maven-repository/master/repository</url> -->
            <!-- fastgit 基本废弃 fastgit之前有点问题 现在可以了 2021-4-10 21:23:43 -->
            <!-- <url>https://raw.fastgit.org/ahviplc/maven-repository/master/repository</url> -->
            <!-- ghproxy【https://ghproxy.com/】速度更快 -->
            <!-- <url>https://ghproxy.com/https://raw.githubusercontent.com/ahviplc/maven-repository/master/repository</url> -->
            <!-- bajins【https://github.bajins.com/】速度也不错 -->
            <!-- <url>https://github.bajins.com/ahviplc/maven-repository/raw/master/repository</url>-->
            <!-- 这里使用fastgit 使用哪个 放开哪个-->
            <url>https://raw.fastgit.org/ahviplc/maven-repository/master/repository</url>
        </repository>
    </repositories>

    <dependencies>
        <!--添加自己的JustToolc工具类库-->
        <dependency>
            <groupId>com.lc</groupId>
            <artifactId>JustToolc</artifactId>
            <version>0.2.0</version>
        </dependency>
        <!--Hutool是一个小而全的Java工具类库-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.4.2</version>
        </dependency>
        <!--导入了-->
        <!--excel工具 EasyExcel依赖-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>2.2.3</version>
        </dependency>
        <!--权限管理 shiro依赖-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>1.8.0</version>
        </dependency>
        <!-- mybatis-plus -->
        <!-- mybatis-plus 是自己开发，并非官方的！现在最新版 3.3.1 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>
        <!-- oracle数据库驱动 -->
        <!-- https://mvnrepository.com/artifact/com.oracle/ojdbc14 这个废弃了 不可down-->
        <!-- <dependency>
             <groupId>com.oracle</groupId>
             <artifactId>ojdbc14</artifactId>
             <version>10.2.0.4.0</version>
         </dependency>-->
        <!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 这个可用 并且JDK版本支持 with JDK8, JDK9, and JDK11-->
        <dependency>
            <groupId>com.oracle.ojdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.3.0.0</version>
            <scope>runtime</scope>
        </dependency>
        <!--代码生成器所需 rai18n - Oracle 12cR1: orai18n.jar. Classes for NLS support.-->
        <!-- https://mvnrepository.com/artifact/cn.easyproject/orai18n -->
        <dependency>
            <groupId>cn.easyproject</groupId>
            <artifactId>orai18n</artifactId>
            <version>12.1.0.2.0</version>
        </dependency>
        <!--代码生成器 默认 模板引擎 依赖 Velocity 其他Freemarker、Beetl，用户可以选择自己熟悉的模板引擎 具体尽在 【https://mp.baomidou.com/guide/generator.html#添加依赖】-->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
            <version>2.2</version>
        </dependency>
        <!-- mysql数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.13.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.68</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <!--原来的lc-es-api:0.0.1-SNAPSHOT.jar 会变成 app.jar 故自己写的Dockerfile 要修改适配-->
        <finalName>app</finalName>
        <plugins>
            <!--springboot打包插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- docker-maven-plugin 插件 第一种使用方法 将构建信息指定到pom.xml中 这种使用有点问题-->
            <!-- todo 解决 -> 虽然已经可以自动构建docker成功 但是其run生成的容器 无法运行 我认为是因为这是在win docker中的原因,回来在linux docker中试试-->
            <!-- 不需要的时候 可以将下面的plugin所有代码注释掉-->
            <!-- docker-maven-plugin 插件 自动部署到 docker 镜像-->
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                &lt;!&ndash; 使用 <version>1.0.0</version> 或者 1.2.2 版本会报错 Failed to load Google application default credentials | java.io.IOException: The Application Default Credentials are not available 但是也会构建lc-es-api-idea镜像成功&ndash;&gt;
                &lt;!&ndash; 没有问题的是 0.4.14 版本 【此版本为 1.0.0版本的上一版本】&ndash;&gt;
                <version>0.4.14</version>
                <configuration>
                    &lt;!&ndash; 注 Imagenameー定要是符合正则 [a-z0-9-.]的，否则构建不会成功&ndash;&gt;
                    &lt;!&ndash; https://github.com/spotify/docker-maven-plugin&ndash;&gt;
                    <imageName>lc-es-api-idea</imageName>
                    <baseImage>java:8</baseImage>
                    &lt;!&ndash; 相当于启动容器后，会自动执行 java -jar /app.jar&ndash;&gt;
                    <entryPoint>["java", "‐jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <dockerHost>http://192.168.1.3:2375</dockerHost>
                </configuration>
                &lt;!&ndash; just for 插件 docker-maven-plugin &ndash;&gt;
                &lt;!&ndash; 注意 无论docker-maven-plugin什么版本 需要下面jar 否则会报错 【java.lang.ClassNotFoundException: javax.activation.DataSource】&ndash;&gt;
                &lt;!&ndash; 虽然报错 但是也会构建 lc-es-api-idea 镜像成功&ndash;&gt;
                <dependencies>
                    <dependency>
                        <groupId>javax.activation</groupId>
                        <artifactId>activation</artifactId>
                        <version>1.1.1</version>
                    </dependency>
                </dependencies>
            </plugin>-->

            <!-- docker-maven-plugin 插件 第二种使用方法 使用已存在的 Dockerfile 构建 完美使用-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.14</version>
                <configuration>
                    <imageName>lc-es-api-idea</imageName>
                    <!-- 指定 Dockerfile 路径 ${basedir}/docker 我这里是 ${basedir} 我将 Docokerfile 文件放在了项目根目录-->
                    <dockerDirectory>${basedir}</dockerDirectory>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <!-- just for 插件 docker-maven-plugin -->
                <!-- 注意 无论docker-maven-plugin什么版本 需要下面jar 否则会报错 【java.lang.ClassNotFoundException: javax.activation.DataSource】-->
                <!-- 虽然报错 但是也会构建 lc-es-api-idea 镜像成功-->
                <dependencies>
                    <dependency>
                        <groupId>javax.activation</groupId>
                        <artifactId>activation</artifactId>
                        <version>1.1.1</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>
